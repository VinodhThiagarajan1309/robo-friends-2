{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","id","email","className","src","c","alt","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","useState","searchField","setSearchField","setRobots","count","setCount","useEffect","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","onClick","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAiBeA,EAfF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MACrB,OACE,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,GAAC,EAACC,IAAI,SACtD,gCACI,6BAAKN,IACL,4BACKE,WCSFK,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAQ,cAAC,EAAD,CAEJX,GAAIO,EAAOI,GAAGX,GACdD,KAAMQ,EAAOI,GAAGZ,KAChBE,MAAOM,EAAOI,GAAGV,OAHZU,MAKf,OACI,8BACKH,KCIII,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACI,qBAAKX,UAAU,MAAf,SACE,uBACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGPI,G,MATA,SAACC,GACd,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,aCyCAC,MAzCf,WAGI,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4BF,mBAAS,IAArC,mBAAOlB,EAAP,KAAeqB,EAAf,KACA,EAA0BH,mBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAIAC,qBAAU,WACFC,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAChBF,MAAK,SAAAG,GACJR,EAAUQ,MAElBC,QAAQC,IAAIT,KACd,CAACA,IAEH,IAAMU,EAAiBhC,EAAOiC,QAAO,SAAAC,GACjC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASjB,EAAYgB,kBAOzD,OAEI,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,wBAAQ0C,QAAS,kBAAMd,EAASD,EAAQ,IAAxC,sBACA,cAAC,EAAD,CAAWhB,aATI,SAACgC,GACpBlB,EAAekB,EAAMC,OAAOC,UASxB,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxC,OAAQgC,UC5BnBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d44190f2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,id,email}) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2' >\n        <img src={`https://robohash.org/${id}?200x200`} c alt=\"logo\" />\n        <div>\n            <h2>{name}</h2>\n            <p>\n                {email}\n            </p>\n        </div>\n\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    const cardComponent = robots.map((user,i) => {\n        return (<Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}/>);\n    });\n  return (\n      <div>\n          {cardComponent}\n      </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n      <div className='pa2'>\n        <input\n            className='pa3 ba b--green bg-lightest-blue'\n            type='search'\n            placeholder='search robots'\n            onChange={searchChange}\n        />\n      </div>\n\n\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return (\n      <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n        {props.children}\n      </div>\n\n  );\n}\n\nexport default Scroll;\n","import React, {useState, useEffect} from 'react';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport './App.css';\nimport Scroll from \"../components/Scroll\";\n\nfunction App() {\n    \n    // Hook into the App State\n    const [searchField, setSearchField] = useState('');\n    const [robots, setRobots] = useState([]);\n    const [count, setCount] = useState(0);\n\n    // Empty Array at the end means that run UseEffect only once\n    // Equivalent to componentDidMount\n    useEffect(()=> {\n            fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => {\n               return response.json();\n            }).then(users => {\n                setRobots(users)\n        });\n        console.log(count);\n    },[count]); // means run this effect only when count changes\n\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    const onSearchChange = (event) => {\n        setSearchField(event.target.value);\n    }\n\n    return (\n        \n        <div className='tc'>\n            <h1 className='f1'>Robo Friends</h1>\n            <button onClick={() => setCount(count + 1)}>Click Me</button>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots}/>\n            </Scroll>\n        </div>\n    );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}